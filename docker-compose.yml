

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build: ./api
    environment:
      DB_HOST: postgres
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${PG_PASSWORD}
      DB_NAME: ${PG_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - "3001:3000"
    restart: unless-stopped
    entrypoint: ["./wait-for-it.sh", "postgres:5432", "--", "node", "server.js"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine 
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./pgadmin/.env
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin  
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  pgadmin-data:
